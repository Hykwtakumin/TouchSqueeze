<html>
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <script>
        /*1番ラズパイのLinksを監視する*/
        const observeReaderId = "1111";
        /*取得したlinksをローカルの配列として保持する*/
        let storedLinks = [];

        /*ローカルのlinksと毎秒取得する新鮮なlinksとの差分をとる関数*/
        const getDiff = (oldLinks, newLinks) => {
            /*newLinksにあってoldLinksに無いものは新しいものとする*/
            /*あるかないかの確認はmongoDBのレコードIdを元に行う*/
            const oldIdArray = oldLinks.map(link => link._id.$oid);

            /*レコードIdを元に存在しているかを真偽値で返す関数*/
            const isContained = (link) => {
                return oldIdArray.includes(link._id.$oid);
            }

            /*newLinksにあってoldLinksに無いものだけを集めた配列を作る*/
            const diffLinks = newLinks.reduce((prev, curr) => {
                if (!isContained(curr)) {
                    prev.push(curr)
                }
                return prev
            }, []);

            if (diffLinks.length != 0) {
                console.log(`新しいタッチイベントが${diffLinks.length}件発生しました!`)
                alert(`新しいタッチイベントが${diffLinks.length}件発生しました!`);
            }

            /*例えば自分が1番の場合は監視するフィルタも作れる*/
            diffLinks.forEach(link => {
                /*リーダーIDが自分のIDと一致する場合*/
                if (link.link[0] === observeReaderId) {
                    console.log(`${link.link[1]}が私にタッチした!`)
                }
            })
        }

        /*ポーリングする関数*/
        const pollingLinks = async () => {
            /*Paramsにidを追加しない場合全てのリーダーのイベントを取得できる*/
            const endPointUrl = `http://connectouch.org/links?id=${observeReaderId}&limit=100`;
            try {
                const request = await fetch(endPointUrl);
                /*新しい配列*/
                const loadedLinks = await request.json();
                /*新しく追加されたLinksを求める*/
                getDiff(storedLinks, loadedLinks)
                /*ローカルの配列を新しい配列に上書きする*/
                storedLinks = loadedLinks;
            } catch (error) {
                console.log(error)
            }
        };

        window.onload = () => {
            /*ポーリングする関数を毎秒呼び出す*/
            setInterval(() => {
                pollingLinks();
            }, 1000);
        };
    </script>
</head>
<body>
<div id="container">
    <%- content %>
</div>
</body>
</html>